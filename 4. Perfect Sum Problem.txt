// Perfect Sum Problem


class Solution{

  public:
  
  int subsetSum(int arr[], int n, int sum)
  {
      vector<vector<bool>> dp(n+1, vector<bool> (sum+1));
      
      for(int i=0; i<n+1; i++)
      {
          dp[i][0] = true;
      }
      for(int i=1; i<sum+1; i++)
      {
          dp[0][i] = false;
      }
      
      for(int i=1; i<n+1; i++)
      {
          for(int j=1; j<sum+1; j++)
          {
              if(arr[i-1] <= j)
              {
                  dp[i][j] = dp[i-1][j] || dp[i-1][j - arr[i-1]];
              }
              else if(arr[i-1] > j)
              {
                  dp[i][j] = dp[i-1][j];
              }
          }
      }
      
      vector<int> value;
      for(int i=0; i<=sum / 2; i++)
      {
          if(dp[n][i] == true)
          {
              value.push_back(i);
          }
      }
      
      int minimum = INT_MAX;
      for(int i=0; i < value.size(); i++)
      {
          minimum = min(minimum, sum - 2 * value[i]);
      }
      
      return minimum;
  }
  
  int minDifference(int arr[], int n)  
  {
      int sum = 0;
	  for(int i=0; i<n; i++)
	  {
	      sum += arr[i];
	  }
	  return subsetSum(arr, n, sum);
  } 
};