// Print Longest Common Subsequence


#include<bits/stdc++.h>
using namespace std;

string findLCS(int n, int m,string &s1, string &s2)
{
	if(n == 0 || m == 0)	return "";

	vector<vector<int>> dp(n+1, vector<int> (m+1));

	for(int i=0; i<n+1; i++)
	{
		for(int j=0; j<m+1; j++)
		{
			if(i == 0 || j == 0)
			{
				dp[i][j] = 0;
			}
		}
	}

	// Creating a LCS Table
	for(int i=1; i<n+1; i++)
	{
		for(int j=1; j<m+1; j++)
		{
			if(s1[i-1] == s2[j-1])
			{
				dp[i][j] = 1 + dp[i-1][j-1];
			}
			else
			{
				dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
			}
		}
	}

	// Now using the same table we are finding the string

	int i = n, j = m;
	string str = "";

	while(i>0 && j>0)
	{
		if(s1[i-1] == s2[j-1])
		{
			str.push_back(s1[i-1]);
			i--;
			j--;
		}
		else
		{
			if(dp[i-1][j] > dp[i][j-1])
			{
				i--;
			}
			else
			{
				j--;
			}
		}
	}

	reverse(str.begin(), str.end());
	return str;
}