// Minimum number of insertions to make string pallindrome


int countMin(string A)
    {
        string B = "";
        for(int i=A.size()-1; i>=0; i--)
        {
            B.push_back(A[i]);
        }
        
        int m = A.size();
        int n = B.size();
        
        if(m == 0 || n == 0)    return 0;
        
        vector<vector<int>> dp(m+1, vector<int> (n+1));
        
        for(int i=0; i<m+1; i++)
        {
            for(int j=0; j<n+1; j++)
            {
                if(i == 0 || j == 0)
                {
                    dp[i][j] = 0;
                }
            }
        }
        
        for(int i=1; i<m+1; i++)
        {
            for(int j=1; j<n+1; j++)
            {
                if(A[i-1] == B[j-1])
                {
                    dp[i][j] = 1 + dp[i-1][j-1];
                }
                else
                {
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        
        int insertions = m - dp[m][n];
        return insertions;
    }