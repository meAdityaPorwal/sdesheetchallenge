// Partitions with Given Difference


class Solution {
  public:
    
    int MOD = 1000000007;
    
    int perfectSum(vector<int>& arr, int n, int sum)
	{
        vector<vector<int>> dp(n+1, vector<int> (sum+1));
	    
	    for(int i=0; i<n+1; i++)
	    {
	        dp[i][0] = 1;
	    }
	    for(int i=1; i<sum+1; i++)
	    {
	        dp[0][i] = 0;
	    }
	    
	    for(int i=1; i<n+1; i++)
	    {
	        for(int j=0; j<sum+1; j++)
	        {
	            if(arr[i-1] <= j)
	            {
	                dp[i][j] = (dp[i-1][j - arr[i-1]] + dp[i-1][j]) % MOD;
	            }
	            else 
	            {
	                dp[i][j] = dp[i-1][j];
	            }
	        }
	    }
	    return dp[n][sum];
	}
      
  
    int countPartitions(int n, int d, vector<int>& arr) {
        
        int  totalSum = 0;
        for(int i=0; i<n; i++)
        {
            totalSum += arr[i];
        }
        
        // Check first whether it is equally divided into two parts or not
        if ((totalSum + d) % 2 != 0) 
        {
            return 0;
        }
        
        int sum = 0;
        sum = (totalSum + d) / 2;
        return perfectSum(arr, n, sum);
    }
};