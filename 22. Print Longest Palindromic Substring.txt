// Print Longest Palindromic Substring


string longestPalindrome(string s1){
        
        string s2 = s1;
        reverse(s2.begin(), s2.end());
        
        int m = s1.size();
        int n = s2.size();
        
        vector<vector<int>> dp(m+1, vector<int> (n+1));
        
        for(int i=0; i<m+1; i++)
        {
            for(int j=0; j<n+1; j++)
            {
                if(i == 0 || j == 0)
                {
                    dp[i][j] = 0;
                }
            }
        }
        
        int maxLength = 0;
        int endIndex = 0;
        
        for(int i=1; i<m+1; i++)
        {
            for(int j=1; j<n+1; j++)
            {
                if(s1[i-1] == s2[j-1])
                {
                    dp[i][j] = 1 + dp[i-1][j-1];
                    
                    // Updating maxLength and endIndex
                    
                    if(maxLength < dp[i][j])
                    {
                        // Calculate the original index in s1
                        int beforeReverseIdx = m - j;
                        
                        // Ensure it's actually a palindrome by checking if it corresponds to the 
                        // same indices in s1
                        if(beforeReverseIdx + dp[i][j] - 1 == i-1)
                        {
                            maxLength = dp[i][j];
                            endIndex = i - 1;
                        }
                    }
                }
                else
                {
                    dp[i][j] = 0;
                }
            }
        }
        
        int i = endIndex;
        int j = endIndex - maxLength + 1;
        string str = "";
        
        while(i >= 0 && j <= endIndex)
        {
            if(s1[i] == s2[j])
            {
                str.push_back(s1[i]);
                i--;
                j++;
            }
            else
            {
                break;
            }
        }
        
        return str;
    }