// Target Sum Problem


class Solution {
  public:
    
    long long perfectSum(vector<int>& arr, int n, int sum)
    {
        vector<vector<int>> dp(n+1, vector<int> (sum+1));
	    
	    for(int i=0; i<n+1; i++)
	    {
	        dp[i][0] = 1;
	    }
	    for(int i=1; i<sum+1; i++)
	    {
	        dp[0][i] = 0;
	    }
	    
	    for(int i=1; i<n+1; i++)
	    {
	        for(int j=0; j<sum+1; j++)
	        {
	            if(arr[i-1] <= j)
	            {
	                dp[i][j] = (dp[i-1][j - arr[i-1]] + dp[i-1][j]) % 1000000007;
	            }
	            else 
	            {
	                dp[i][j] = dp[i-1][j];
	            }
	        }
	    }
	    return dp[n][sum];
    }
  
  
    long long findTargetSumWays(int n, vector<int>& arr, int target) {
        
        if(n == 1)
        {
            if(arr[0] < target || arr[0] > target)  return 0;
        }
        
        long long totalSum = 0;
        for(int i=0; i<n; i++)
        {
            totalSum += arr[i];
        }
        
        if((totalSum + target) % 2 != 0)
        {
            return 0;
        }
        
        int sum = 0;
        sum = (totalSum + target) / 2;
        
        return perfectSum(arr, n, sum);
    }
};